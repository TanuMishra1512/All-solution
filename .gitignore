#SORT COLORS

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        l=0
        curr=0
        r=len(nums)-1
        while curr<=r:
            if nums[curr] == 0:
                nums[l],nums[curr] = nums[curr],nums[l]
                l+=1
                curr+=1
            elif nums[curr] == 2:
                nums[r],nums[curr] = nums[curr],nums[r]
                r-=1
            else:
                curr+=1
                
# GROUP ANAGRAM
                
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        finlist=[]
        mydict={}
        for a in strs:
            key=''.join(sorted(a))
            if key in mydict:
               mydict[key]=mydict[key]+[a]
            else:
               mydict[key]=[a]
        for value in mydict.values():
            finlist.append(value)
        return finlist

#SINGLE NUMBER
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        res=0
        for n in nums:
            res=n^res
        return res
        
 # NEXT PERMUTATIONS
 
 class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
       length=len(nums)
       if length<=2:
           return nums.reverse()
       pointer = length-2
       while pointer>=0 and nums[pointer]>=nums[pointer+1]:
            pointer-=1
       if pointer==-1:
            return nums.reverse()
       for x in range(length-1,pointer,-1):
            if nums[pointer]<nums[x]:
                nums[pointer],nums[x]=nums[x],nums[pointer]
                break
       nums[pointer+1:]=reversed(nums[pointer+1:])
       
 # ROTATE IMAGE
 
 class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
       length=len(nums)
       if length<=2:
           return nums.reverse()
       pointer = length-2
       while pointer>=0 and nums[pointer]>=nums[pointer+1]:
            pointer-=1
       if pointer==-1:
            return nums.reverse()
       for x in range(length-1,pointer,-1):
            if nums[pointer]<nums[x]:
                nums[pointer],nums[x]=nums[x],nums[pointer]
                break
       nums[pointer+1:]=reversed(nums[pointer+1:])
       
# DETERMINE IF TWO STRINGS ARE CLOSED
 
 class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:
        d1={}
        d2={}
        for i in word1:
            if i not in d1:
                d1[i]=1
            else:
                d1[i]=d1[i]+1
        for i in word2:
            if i not in d2:
                d2[i]=1
            else:
                d2[i]=d2[i]+1
        if sorted(d1.values())==sorted(d2.values()) and sorted(d1.keys())==sorted(d2.keys()):
            return True
        else:
            return False
            
# SORT CHARACTERS BY FREQUENCY
class Solution:
    def frequencySort(self, s: str) -> str:
        dict={}
        result=''
        for i in s:
            if i in dict:
                dict[i]+=1
            else:
                dict[i]=1
        s=sorted(dict,key=lambda x:dict[x],reverse=True)
        for char in s:
            result+=char*dict[char]
        return result
        
# REVERSE VOWELS OF A STRING
class Solution:
    def reverseVowels(self, s: str) -> str:
        lst=list(s)
        vowel=set('aeiouAEIOU')
        left=0
        right=len(lst)-1
        while (left<right):
            if lst[left] not in vowel:
                left+=1
                continue
            elif lst[right] not in vowel:
                right-=1
                continue
            lst[left],lst[right]=lst[right],lst[left]
            left+=1
            right-=1
        return ''.join(lst)
     
# ARTHMETIC PROGRESSION

def checkIsAP(arr, n):
    if (n == 1): 
       return True
     arr.sort()
    d = arr[1] - arr[0]
    for i in range(2, n):
        if (arr[i] - arr[i-1] != d):
            return False
    return True
 
 
    
        

        
